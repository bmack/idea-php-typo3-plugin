{
  parserClass="com.cedricziel.idea.typoscript.lang.parser.TypoScriptParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="TypoScript"
  psiImplClassSuffix="Impl"
  psiPackage="com.cedricziel.idea.typoscript.lang.psi"
  psiImplPackage="com.cedricziel.idea.typoscript.lang.psi.impl"

  elementTypeHolderClass="com.cedricziel.idea.typoscript.lang.psi.TypoScriptTypes"
  elementTypeClass="com.cedricziel.idea.typoscript.lang.psi.TypoScriptElementType"
  tokenTypeClass="com.cedricziel.idea.typoscript.lang.psi.TypoScriptTokenType"

  tokens = [
    LBRACE='{'
    RBRACE='}'
    LBRACKET='['
    RBRACKET=']'
    LPARENTH='('
    RPARENTH=')'

    DOT='.';
    COMMA=',';

    ASSIGN='=';
  ]

  extends(".*Expr")=Expression
  consumeTokenMethod(".*Expr")="consumeTokenFast"
}

TypoScriptFile ::= Statement*

Statement ::= (InlineChain | COMMENT | CRLF)

Expression ::=   AssignExpr
                 | ArrayExpr
                 | PrimaryGroup

AssignExpr ::= IdentifierExpr '=' Value {
  pin = 2
}
ArrayExpr  ::= IdentifierExpr (DOT PropertyAccessExpr)? '{' Statement* '}' {
  pin = 3
}

Value ::= OBJECT_NAME | ConstantExpression | IDENTIFIER | TEXT
private ConstantExpression ::= '${' ConstantName '}'
private ConstantName ::= IDENTIFIER {
  pin = 1
  recoverWhile = constantNameRecover
}
private constantNameRecover::= !{"}"}

IdentifierExpr ::= IDENTIFIER (DOT PropertyAccessExpr)?
PropertyAccessExpr ::= IDENTIFIER ( DOT PropertyAccessExpr)?

InlineChain      ::= Expression Chain? {
 pin=1
}

Chain          ::= DOT Expression Chain? { pin=1 }

private PrimaryGroup ::= IdentifierExpr
