{
  parserClass="com.cedricziel.idea.fluid.lang.parser.FluidParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Fluid"
  psiImplClassSuffix="Impl"
  psiPackage="com.cedricziel.idea.fluid.lang.psi"
  psiImplPackage="com.cedricziel.idea.fluid.lang.psi.impl"

  elementTypeHolderClass="com.cedricziel.idea.fluid.lang.psi.FluidTypes"
  elementTypeClass="com.cedricziel.idea.fluid.lang.psi.FluidElementType"
  tokenTypeClass="com.cedricziel.idea.fluid.lang.psi.FluidTokenType"

  tokens = [
    EXPR_START='{'
    EXPR_END='}'

    COLON=','
    DOT='.'
    COMMA=','
    ARROW='->'

    LEFT_PARENTH='('
    RIGHT_PARENTH=')'

    ASSIGN='='
    AND='&&'
    OR='||'
    NOT='!'
    TERNARY_QUESTION_OP='?'
    TERNARY_BRANCHES_OP=':'

    LT='<'
    LEQ='<='
    GEQ='>='
    GT='>'
    EQ='=='
    NEQ='!='

    IDENTIFIER='regexp:[\p{Alpha}_][\p{Alnum}_:]*'
    INTEGER_NUMBER='regexp:0|[1-9]\d*'
    FLOAT_NUMBER='regexp:[0-9]*\.[0-9]+([eE][-+]?[0-9]+)?|[0-9]+[eE][-+]?[0-9]+'

    SINGLE_QUOTE="'"
    DOUBLE_QUOTE='"'

    DOUBLE_QUOTED_STRING="regexp:\"([^\\\"\r\n]|\\[^\r\n])*\"?"
    SINGLE_QUOTED_STRING="regexp:'([^\\\'\r\n]|\\[^\r\n])*'?"

    NUMBER='regexp:-?(0|[1-9]\d*)(\.\d+)?([eE][+-]?\d*)?'

    COMMENT_START='<!--/*'
    COMMENT_END='*/-->'
    COMMENT_CONTENT='regexp:.*'

    NS='regexp:[a-zA-Z]+'
    VIEWHELPER_NAME='regexp:[a-zA-Z]*?(.[a-zA-Z])*'

    CONTENT = 'content'
  ]

  extends("string_literal|number_literal|boolean_literal")=literal
}

fluid ::= expression *

template_comment ::= "<!--/*" COMMENT_CONTENT? "*/-->"

private expr_node ::= variableNode | viewHelperNode | viewHelperCallNode | numericNode | literal

viewHelperNode ::= boundNamespace ':' viewHelperReference '(' viewHelperArgumentList ')'
private viewHelperReference ::= VIEWHELPER_NAME
private boundNamespace ::= NS

viewHelperArgumentList ::= argumentIndex ':' argumentValue

viewHelperCallNode ::= '->' viewHelperNode {
  pin = 1
}

argumentIndex ::= string_literal
argumentValue ::= string_literal | numericNode | variableNode

numericNode ::= FLOAT_NUMBER | INTEGER_NUMBER

variableNode ::= IDENTIFIER

string_literal ::= SINGLE_QUOTED_STRING | DOUBLE_QUOTED_STRING {
  methods=[
    getTextFragments
    getValue
    SINGLE_QUOTED_STRING=""
    DOUBLE_QUOTED_STRING=""
  ]
  mixin="com.cedricziel.idea.fluid.lang.psi.impl.FluidStringLiteralMixin"
}

number_literal ::= NUMBER {
  methods=[
    NUMBER=""
    getValue
  ]
}

boolean_literal ::= TRUE | FALSE {
  methods=[
    getValue
  ]
}

literal ::= string_literal | number_literal | boolean_literal {
  methods=[
    isQuotedString
  ]
  mixin="com.cedricziel.idea.fluid.lang.psi.impl.FluidLiteralMixin"
}

expression ::= '{' expr_node '}' {
  pin=1
}
